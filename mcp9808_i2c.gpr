with "config/mcp9808_i2c_config.gpr";
project Mcp9808_I2c is

   for Library_Name use "Mcp9808_I2c";
   for Library_Version use Project'Library_Name & ".so." & Mcp9808_I2c_Config.Crate_Version;

   for Source_Dirs use ("src/", "config/");
   for Object_Dir use "obj/" & Mcp9808_I2c_Config.Build_Profile;
   for Create_Missing_Dirs use "True";
   for Library_Dir use "lib";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("MCP9808_I2C_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

type Enabled_Kind is ("enabled", "disabled");
  Compile_Checks : Enabled_Kind := External ("MCP9808_I2C_COMPILE_CHECKS", "enabled");
  Runtime_Checks : Enabled_Kind := External ("MCP9808_I2C_RUNTIME_CHECKS", "disabled");
  Style_Checks : Enabled_Kind := External ("MCP9808_I2C_STYLE_CHECKS", "disabled");
  Contracts_Checks : Enabled_Kind := External ("MCP9808_I2C_CONTRACTS", "disabled");
  
 type Build_Kind is ("debug", "optimize");
     Build_Mode : Build_Kind := External ("MCP9808_I2C_BUILD_MODE", "debug");
  

 Compile_Checks_Switches := ();
 case Compile_Checks is
 when "enabled" =>
 Compile_Checks_Switches :=
 ("-gnatwa",  -- All warnings
 "-gnatVa",  -- All validity checks
 "-gnatwe"); -- Warnings as errors
 when others => null;
 end case;
 
 Build_Switches := ();
 case Build_Mode is
 when "optimize" =>
 Build_Switches := ("-O3",     -- Optimization
 "-gnatn"); -- Enable inlining
 when "debug" =>
 Build_Switches := ("-g",   -- Debug info
 "-O0"); -- No optimization
 end case;

Runtime_Checks_Switches := ();
 case Runtime_Checks is
 when "enabled" => null;
 when others =>
 Runtime_Checks_Switches :=
 ("-gnatp"); -- Suppress checks
 end case;

Style_Checks_Switches := ();
 case Style_Checks is
 when "enabled" =>
 Style_Checks_Switches :=
 ("-gnatyg",   -- GNAT Style checks
 "-gnaty-d",  -- Disable no DOS line terminators
 "-gnatyM80", -- Maximum line length
 "-gnatyO");  -- Overriding subprograms explicitly marked as such
 when others => null;
 end case;

Contracts_Switches := ();
 case Contracts_Checks is
 when "enabled" =>
 Contracts_Switches :=
 ("-gnata"); --  Enable assertions and contracts
 when others => null;
 end case;

package Compiler is
  for Default_Switches ("Ada") use
  Compile_Checks_Switches &
  Build_Switches &
  Runtime_Checks_Switches &
  Style_Checks_Switches &
  Contracts_Switches &
  (
  "-gnatwl",       --  Elaboration warnings
  "-gnatQ",        --  Keep going after errors
 "-gnatw.X",      --  Hide No_Exception_Propagation warnings
 "-gnatwB",       --  Hide Warn_On_Bad_Fixed_Value
 "-fstack-usage", --  Output stack usage information
 "-ffunction-sections",
 "-fdata-sections"
 );
 for Local_Configuration_Pragmas use "gnat.adc";
 end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

   package Install is
      for Artifacts (".") use ("share");
   end Install;

end Mcp9808_I2c;
